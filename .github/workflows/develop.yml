name: Django CI on develop

on:
  pull_request:
    branches:
      - develop
    types: [closed]
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  # GAR_LOCATION: ${{ secrets.GAR_LOCATION }} # TODO: update region of the Artifact Registry
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} # TODO: update region of the Artifact Registry
  GKE_CLUSTER: ${{ secrets.GKE_DEV_CLUSTER }}    # TODO: update to cluster name
  # GKE_ZONE: ${{ secrets.GKE_ZONE }}   # TODO: update to cluster zone
  GKE_ZONE: ${{ vars.GKE_ZONE }}   # TODO: update to cluster zone
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }} # TODO: update to deployment name
  REPOSITORY: ${{ secrets.DEV_REPOSITORY }} # TODO: update to Artifact Registry docker repository
  IMAGE: ${{ secrets.IMAGE }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    services:
      db:
        image: postgres
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Create local.env file
      run: |
        touch local.env
        echo "DATABASE_URL=${{ secrets.DJANGO_DATABASE_URL }}" >> local.env
        echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> local.env
        echo "ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> local.env
        echo "CSRF_TRUSTED_ORIGINS=${{ secrets.DJANGO_CSRF_TRUSTED_ORIGINS }}" >> local.env
        echo "CORS_ORIGIN_WHITELIST=${{ secrets.DJANGO_CORS_ORIGIN_WHITELIST }}" >> local.env
        echo "STATIC_URL=${{ secrets.DJANGO_STATIC_URL }}" >> local.env
        echo "DEBUG=${{ vars.DJANGO_DEBUG }}" >> local.env
        echo "LANGUAGE_CODE=${{ vars.DJANGO_LANGUAGE_CODE }}" >> local.env
        echo "TIME_ZONE=${{ vars.DJANGO_TIME_ZONE }}" >> local.env
    - name: Run Tests
      run: |
        python manage.py makemigrations
        python manage.py migrate
        python manage.py test
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 300
    environment: development

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        access_token_lifetime: 600s

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GAR_LOCATION }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize
    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #     # replacing the image name in the k8s template
    #   run: |-
    #     ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
    #     ./kustomize build . | kubectl apply -f -
    #     kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     kubectl get services -o wide